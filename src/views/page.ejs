<div class="max-w-4xl mx-auto">
    <% if (typeof user !== 'undefined' && user) { %>
        <div class="bg-white shadow rounded-lg p-6 relative">
            <!-- Header Container -->
            <div class="page-header-container">
                <!-- Title Section -->
                <div class="editable-title-container">
                    <div id="page-title" class="editable-title" contenteditable="true">
                        <%= typeof page !== 'undefined' && page.title ? page.title : 'Untitled Growth Canvas' %>
                    </div>
                </div>

                <!-- Action Links -->
                <div class="action-links">
                    <a href="#" onclick="showChangeUrlModal(event)" class="text-gray-400 hover:text-blue-600 transition-colors duration-200" title="Change URL">
                        <ion-icon name="pencil-outline" size="20"></ion-icon>
                    </a>
                    <a href="#" onclick="showDeleteModal(event)" class="text-gray-400 hover:text-red-600 transition-colors duration-200" title="Delete">
                        <ion-icon name="trash-outline" size="20"></ion-icon>
                    </a>
                    <a href="#" id="saveTitleLink" class="text-gray-400 hover:text-blue-600 transition-colors duration-200 hidden" title="Save Changes">
                        <ion-icon name="save-outline" size="20"></ion-icon>
                    </a>
                </div>
            </div>
            <!-- Header Line -->
            <div class="header-line"></div>

            <!-- Grid container with explicit axes -->
            <div class="flex flex-col items-center justify-center">
                <div id="xy-plane" style="position: relative; width: 350px; height: 350px; margin: auto;">
                    <div class="y-axis"></div>
                    <div class="x-axis"></div>
                    
                    <!-- X-axis labels -->
                    <div class="x-label-group left">
                        <div class="main-label">Never</div>
                        <div class="sub-label">Do</div>
                    </div>
                    <div class="x-label-group right">
                        <div class="main-label">Always</div>
                        <div class="sub-label">Do</div>
                    </div>
                    
                    <!-- Y-axis labels -->
                    <div class="y-label top">Helpful</div>
                    <div class="y-label bottom">Unhelpful</div>
                </div>
            </div>
        </div>
    <% } else { %>
        <div class="bg-white shadow rounded-lg p-6 mb-6">
            <h2 class="text-2xl font-semibold mb-4">Get Started</h2>
            <p class="text-gray-600 mb-6">Sign in with Google to create and manage your pages.</p>
            <a href="/auth/google" class="inline-block bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded">
                Sign in with Google
            </a>
        </div>
    <% } %>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
    <div class="bg-white p-6 rounded-lg max-w-md w-full mx-4">
        <h3 class="text-lg font-semibold mb-4">Confirm Delete</h3>
        <p class="mb-4">Are you sure you want to delete this page? This action cannot be undone.</p>
        <div class="flex justify-end gap-4">
            <button onclick="closeDeleteModal()" class="px-4 py-2 border rounded hover:bg-gray-100">
                Cancel
            </button>
            <button onclick="deletePage()" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600">
                Delete
            </button>
        </div>
    </div>
</div>

<!-- URL Change Modal -->
<div id="changeUrlModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
    <div class="bg-white p-4 rounded-lg shadow-lg max-w-sm w-full mx-4">
        <div class="mb-4 text-center text-gray-600">Change URL</div>
        <div class="flex items-center gap-2 mb-4">
            <input type="text" 
                   id="newUrlInput" 
                   class="flex-1 px-3 py-2 border rounded focus:outline-none focus:border-blue-500"
                   value="<%= typeof page !== 'undefined' && page.urlId ? page.urlId : '' %>"
            >
            <button onclick="updateUrl()" 
                    class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
                Change
            </button>
            <button onclick="closeChangeUrlModal()" 
                    class="text-gray-400 hover:text-gray-600">
                <ion-icon name="close-outline" class="w-6 h-6"></ion-icon>
            </button>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const titleElement = document.getElementById('page-title');
    const saveLink = document.getElementById('saveTitleLink');
    const xyPlane = document.getElementById('xy-plane');
    let originalTitle = titleElement ? titleElement.textContent.trim() : 'Untitled';
    
    function showSaveButton() {
        saveLink.classList.remove('hidden');
    }

    function hideSaveButton() {
        saveLink.classList.add('hidden');
    }

    async function saveDots() {
    try {
        const urlParts = window.location.pathname.split('/');
        if (urlParts.length <= 2 || urlParts[1] === '') {
            console.log('Skipping save - on homepage');
            return;
        }
        
        const dots = getAllDots();
        const urlId = urlParts[urlParts.length - 1];

        // Format dots to match API expectations with enhanced validation
        const formattedDots = dots.map(dot => {
            let xValue, yValue;
            
            // Handle both string and numeric position values
            if (typeof dot.x === 'string' && dot.x.includes('px')) {
                xValue = parseFloat(dot.x.replace('px', ''));
            } else if (typeof dot.x === 'number') {
                xValue = dot.x;
            } else if (dot.position && dot.position.left) {
                xValue = parseFloat(dot.position.left);
            } else {
                console.warn('Invalid x value:', dot.x);
                xValue = 0;
            }

            if (typeof dot.y === 'string' && dot.y.includes('px')) {
                yValue = parseFloat(dot.y.replace('px', ''));
            } else if (typeof dot.y === 'number') {
                yValue = dot.y;
            } else if (dot.position && dot.position.top) {
                yValue = parseFloat(dot.position.top);
            } else {
                console.warn('Invalid y value:', dot.y);
                yValue = 0;
            }

            // Validate coordinates
            let coordinates = dot.coordinates;
            if (!coordinates) {
                coordinates = `(${xValue.toFixed(2)}, ${yValue.toFixed(2)})`;
                console.warn('Generated missing coordinates:', coordinates);
            }

            const formattedDot = {
                x: xValue.toString(),
                y: yValue.toString(),
                coordinates: coordinates,
                label: dot.label || '',
                labelOffset: {
                    x: 50,
                    y: -50
                },
                lineLength: 70.71067811865476,
                lineAngle: -45
            };

            return formattedDot;
        });

        const response = await fetch(`/api/pages/${urlId}/dots`, {
            method: 'POST',
            headers: { 
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            credentials: 'same-origin',
            body: JSON.stringify({ dots: formattedDots })
        });

        if (!response.ok) {
            const errorData = await response.json();
            console.error('Server error response:', errorData);
            throw new Error(errorData.error || `Server error: ${response.status}`);
        }

        const result = await response.json();
        return result;

    } catch (error) {
        console.error('Error saving dots:', error);
        if (error instanceof Error) {
            console.error('Error details:', {
                message: error.message,
                stack: error.stack,
                name: error.name
            });
        }
        throw error;
    }
}

function getAllDots() {
    const dots = [];
    const dotElements = document.querySelectorAll('.dot-container');
    const xyPlane = document.getElementById('xy-plane');
    
    if (!xyPlane) {
        console.error('XY Plane element not found');
        return dots;
    }
    
    const xyPlaneRect = xyPlane.getBoundingClientRect();
    
    dotElements.forEach((dotContainer, index) => {
        try {
            const centerX = xyPlaneRect.width / 2;
            const centerY = xyPlaneRect.height / 2;
            
            // Get position directly from style or computed style
            const computedStyle = window.getComputedStyle(dotContainer);
            const relativeLeft = parseFloat(dotContainer.style.left || computedStyle.left) || 0;
            const relativeTop = parseFloat(dotContainer.style.top || computedStyle.top) || 0;
            
            // Calculate grid coordinates
            const x = ((relativeLeft - centerX) / (xyPlaneRect.width / 10)).toFixed(2);
            const y = ((centerY - relativeTop) / (xyPlaneRect.height / 10)).toFixed(2);
            
            // Get elements
            const labelElement = dotContainer.querySelector('.user-dot-label');
            const coordsElement = dotContainer.querySelector('.dot-coordinates');
                       
            // Create dot object with enhanced validation
            const dot = {
                x: relativeLeft,
                y: relativeTop,
                label: (labelElement && labelElement.textContent) ? labelElement.textContent : '',
                coordinates: (coordsElement && coordsElement.textContent) ? 
                           coordsElement.textContent : 
                           `(${x}, ${y})`,
                position: {
                    left: relativeLeft,
                    top: relativeTop
                }
            };
            
            dots.push(dot);
            
        } catch (error) {
            console.error(`Error processing dot ${index}:`, error);
            if (error instanceof Error) {
                console.error('Processing error details:', {
                    message: error.message,
                    stack: error.stack
                });
            }
        }
    });
    
    console.log('Total dots collected:', dots.length);
    return dots;
}

    if (titleElement && saveLink) {
        hideSaveButton();

        titleElement.addEventListener('input', function() {
            const currentTitle = this.textContent.trim();
            if (currentTitle !== originalTitle) {
                showSaveButton();
            } else {
                hideSaveButton();
            }
        });

        titleElement.addEventListener('blur', function(e) {
            if (e.relatedTarget !== saveLink && !this.textContent.trim()) {
                this.textContent = originalTitle;
                hideSaveButton();
            }
        });

        saveLink.addEventListener('click', async function(e) {
            e.preventDefault();
            e.stopPropagation();

            const newTitle = titleElement.textContent.trim();
            
            try {
                const urlParts = window.location.pathname.split('/');
                const urlId = urlParts[urlParts.length - 1];
                
                const response = await fetch(`/api/pages/update/${urlId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        title: newTitle,
                        content: newTitle
                    })
                });

                if (response.ok) {
                    originalTitle = newTitle;
                    hideSaveButton();
                } else {
                    throw new Error('Failed to update title');
                }
            } catch (error) {
                console.error('Error saving title:', error);
                alert('Error saving title. Please try again.');
            }
        });

        titleElement.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                saveLink.click();
            }
        });
    }

    if (xyPlane) {
        let saveTimeout = null;
        let isProcessing = false;

        // Create mutation observer with debounced save
        const observer = new MutationObserver((mutations) => {
            // Check if any relevant mutations occurred
            const shouldSave = mutations.some(mutation => {
                // For childList changes (dot addition/removal)
                if (mutation.type === 'childList') {
                    return Array.from(mutation.addedNodes).some(node => 
                        node instanceof Element && node.classList?.contains('dot-container')
                    ) || Array.from(mutation.removedNodes).some(node => 
                        node instanceof Element && node.classList?.contains('dot-container')
                    );
                }
                
                // For attribute changes, only process specific attributes on dot containers
                if (mutation.type === 'attributes' && 
                    mutation.target instanceof Element && 
                    mutation.target.classList.contains('dot-container')) {
                    return ['style', 'data-line-length', 'data-line-angle'].includes(
                        mutation.attributeName || ''
                    );
                }
                
                return false;
            });

            if (shouldSave && !isProcessing) {
                // Clear any pending save
                if (saveTimeout) {
                    clearTimeout(saveTimeout);
                }
                
                // Set up new debounced save
                saveTimeout = setTimeout(async () => {
                    if (isProcessing) return;
                    
                    isProcessing = true;
                    try {
                        await saveDots();
                    } catch (error) {
                        console.error('Error in debounced save:', error);
                    } finally {
                        isProcessing = false;
                    }
                }, 1000); // Only save after 1 second of no changes
            }
        });

        // Configure observer with specific options
        observer.observe(xyPlane, { 
            childList: true,
            subtree: true,
            attributes: true,
            attributeFilter: ['style', 'data-line-length', 'data-line-angle'],
            characterData: false
        });

        // Clean up function
        const cleanup = () => {
            if (saveTimeout) {
                clearTimeout(saveTimeout);
                saveTimeout = null;
            }
            observer.disconnect();
        };

        // Clean up when navigating away
        window.addEventListener('beforeunload', cleanup);
    }

});

// Modal and URL handling functions
function showChangeUrlModal(event) {
    event.preventDefault();
    const modal = document.getElementById('changeUrlModal');
    if (modal) {
        modal.classList.remove('hidden');
        const input = document.getElementById('newUrlInput');
        if (input) input.select();
    }
}

function closeChangeUrlModal() {
    const modal = document.getElementById('changeUrlModal');
    if (modal) modal.classList.add('hidden');
}

function showDeleteModal(event) {
    event.preventDefault();
    document.getElementById('deleteModal').classList.remove('hidden');
}

function closeDeleteModal() {
    document.getElementById('deleteModal').classList.add('hidden');
}

async function updateUrl() {
    const input = document.getElementById('newUrlInput');
    if (!input) return;
    
    const newUrl = input.value.trim();
    if (!newUrl) {
        alert('Please enter a new URL');
        return;
    }

    try {
        const urlParts = window.location.pathname.split('/');
        const currentUrlId = urlParts[urlParts.length - 1];
        
        const response = await fetch(`/api/pages/update/${currentUrlId}/url`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ newUrlId: newUrl })
        });

        const data = await response.json();

        if (response.ok) {
            const username = urlParts[1];
            window.location.href = `/${username}/${data.newUrlId}`;
        } else {
            throw new Error(data.error || 'Failed to update URL');
        }
    } catch (error) {
        console.error('Error updating URL:', error);
        alert(error.message || 'Failed to update URL. Please try again.');
    }
}

async function deletePage() {
    try {
        const urlParts = window.location.pathname.split('/');
        if (urlParts.length < 3) {
            throw new Error('Invalid URL format');
        }

        // Extract urlId - it's the last part of the path
        const urlId = urlParts[urlParts.length - 1];

        console.log('Attempting to delete page:', {
            path: window.location.pathname,
            urlId
        });

        // Use the direct urlId in the API call
        const response = await fetch(`/api/pages/${urlId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            credentials: 'same-origin'
        });

        if (!response.ok) {
            // Try to get error message from JSON response first
            try {
                const errorData = await response.json();
                throw new Error(errorData.error || `Failed to delete page: ${response.status}`);
            } catch (jsonError) {
                // If JSON parsing fails, use the status text
                throw new Error(`Failed to delete page: ${response.status} ${response.statusText}`);
            }
        }

        // Only try to parse response as JSON if we got a successful response
        const data = await response.json();
        console.log('Delete successful:', data);
        window.location.href = '/dashboard';

    } catch (error) {
        console.error('Error deleting page:', error);
        if (error instanceof Error) {
            console.error('Delete error details:', {
                message: error.message,
                stack: error.stack,
                name: error.name
            });
        }
        // Show user-friendly error message
        alert('Error deleting page. Please try again.');
    } finally {
        closeDeleteModal();
    }
}

</script>

<script src="/js/bundle.js"></script>