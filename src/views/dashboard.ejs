<div class="max-w-4xl mx-auto">
    <div class="bg-white shadow rounded-lg p-6 mb-6">
        <div>
            <h2 class="text-xl font-semibold mb-4">Higher Level Goals</h2>
            <% if (pages && pages.length > 0) { %>
                <div class="space-y-2">
                    <table class="w-full">
                        <thead>
                            <tr class="text-left">
                                <th class="pb-2">Page Title</th>
                                <th class="pb-2">URL</th>
                                <th class="pb-2"></th>
                            </tr>
                        </thead>
                        <tbody>
                            <% pages.forEach(page => { %>
                                <tr class="border-t hover:bg-gray-50" data-page-id="<%= page.urlId %>">
                                    <td class="py-3 relative group">
                                        <div class="flex items-center">
                                            <a href="/<%= user.username %>/<%= page.urlId %>" 
                                               class="font-medium hover:text-blue-600 cursor-pointer page-title">
                                                <%= page.title %>
                                            </a>
                                            <button class="edit-title-btn ml-2 opacity-0 group-hover:opacity-100 transition-opacity">
                                                <ion-icon name="pencil-outline" class="text-gray-400 hover:text-blue-500"></ion-icon>
                                            </button>
                                        </div>
                                    </td>
                                    <td class="py-3 relative group">
                                        <div class="flex items-center">
                                            <a href="/<%= user.username %>/<%= page.urlId %>" 
                                               class="text-gray-600 hover:text-blue-600 page-url">
                                                <%= page.urlId %>
                                            </a>
                                            <button class="edit-url-btn ml-2 opacity-0 group-hover:opacity-100 transition-opacity">
                                                <ion-icon name="pencil-outline" class="text-gray-400 hover:text-blue-500"></ion-icon>
                                            </button>
                                        </div>
                                    </td>
                                    <td class="py-3">
                                        <div class="flex items-center justify-end gap-4">
                                            <button class="save-btn hidden text-green-500 hover:text-green-600">
                                                <ion-icon name="checkmark-outline" size="large"></ion-icon>
                                            </button>
                                            <button class="delete-btn text-red-500 hover:text-red-600"
                                                    onclick="showDeleteModal('<%= page.urlId %>', '<%= page.title %>')">
                                                <ion-icon name="trash-outline" size="large"></ion-icon>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            <% }) %>
                        </tbody>
                    </table>
                </div>
            <% } else { %>
                <p class="text-gray-600">No pages created yet.</p>
            <% } %>
        </div>
    </div>
</div>

<!-- Edit Modal -->
<div id="editModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white p-6 rounded-lg max-w-md w-full mx-4">
        <h3 class="text-lg font-semibold mb-4">Edit <span id="editType"></span></h3>
        <form id="editForm" class="space-y-4">
            <input type="hidden" id="editPageId">
            <input type="hidden" id="editFieldType">
            <div>
                <label for="editValue" class="block text-sm font-medium text-gray-700 mb-1">New Value</label>
                <input type="text" id="editValue" name="editValue" required
                       class="w-full border rounded px-3 py-2 focus:border-blue-500 focus:ring-1 focus:ring-blue-500">
            </div>
            <div class="flex justify-end gap-4">
                <button type="button" onclick="closeEditModal()" 
                    class="px-4 py-2 border rounded hover:bg-gray-100">
                    Cancel
                </button>
                <button type="submit"
                    class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
                    Save
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Delete Modal -->
<div id="deleteModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white p-6 rounded-lg max-w-md w-full mx-4">
        <h3 class="text-lg font-semibold mb-4">Confirm Delete</h3>
        <p class="mb-4">Are you sure you want to delete "<span id="pageTitle" class="font-medium"></span>"? This action cannot be undone.</p>
        <div class="flex justify-end gap-4">
            <button onclick="closeDeleteModal()" 
                class="px-4 py-2 border rounded hover:bg-gray-100">
                Cancel
            </button>
            <button onclick="deletePageConfirmed()"
                class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600">
                Delete
            </button>
        </div>
    </div>
</div>

<script>
    let currentPageUrlId = null;
    let hasUnsavedChanges = {};
    
    // Edit Modal Functions
    function showEditModal(pageId, fieldType, currentValue) {
        const modal = document.getElementById('editModal');
        const editType = document.getElementById('editType');
        const editValue = document.getElementById('editValue');
        const editPageId = document.getElementById('editPageId');
        const editFieldType = document.getElementById('editFieldType');
        
        editType.textContent = fieldType === 'title' ? 'Title' : 'URL';
        editValue.value = currentValue;
        editPageId.value = pageId;
        editFieldType.value = fieldType;
        
        modal.classList.remove('hidden');
        editValue.focus();
    }
    
    function closeEditModal() {
        document.getElementById('editModal').classList.add('hidden');
    }
    
    function showSaveButton(pageId) {
        const row = document.querySelector(`tr[data-page-id="${pageId}"]`);
        const saveBtn = row.querySelector('.save-btn');
        saveBtn.classList.remove('hidden');
        hasUnsavedChanges[pageId] = true;
    }
    
    function hideSaveButton(pageId) {
        const row = document.querySelector(`tr[data-page-id="${pageId}"]`);
        const saveBtn = row.querySelector('.save-btn');
        saveBtn.classList.add('hidden');
        hasUnsavedChanges[pageId] = false;
    }
    
    // Initialize event listeners when DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
        // Edit Title/URL button handlers
        document.querySelectorAll('.edit-title-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const row = this.closest('tr');
                const pageId = row.dataset.pageId;
                const currentTitle = row.querySelector('.page-title').textContent.trim();
                showEditModal(pageId, 'title', currentTitle);
            });
        });
    
        document.querySelectorAll('.edit-url-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const row = this.closest('tr');
                const pageId = row.dataset.pageId;
                const currentUrl = row.querySelector('.page-url').textContent.trim();
                showEditModal(pageId, 'url', currentUrl);
            });
        });
    
   // Edit form submission handler
    const editForm = document.getElementById('editForm');
        if (editForm) {
            editForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const pageId = document.getElementById('editPageId').value;
                const fieldType = document.getElementById('editFieldType').value;
                const newValue = document.getElementById('editValue').value.trim();
                
                if (!newValue) {
                    alert('Please enter a value');
                    return;
                }
                
                try {
                    if (fieldType === 'title') {
                        console.log('Updating title:', {
                            urlId: pageId,
                            newTitle: newValue
                        });

                        const response = await fetch(`/api/pages/update/${pageId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Accept': 'application/json'
                            },
                            body: JSON.stringify({ 
                                title: newValue,
                                content: newValue 
                            })
                        });

                        if (!response.ok) {
                            const errorData = await response.json();
                            throw new Error(errorData.error || 'Failed to update title');
                        }

                        const data = await response.json();
                        
                        // Update title in the table row
                        const row = document.querySelector(`tr[data-page-id="${pageId}"]`);
                        if (!row) {
                            throw new Error('Could not find page row in table');
                        }

                        // Update title text
                        const titleElements = row.querySelectorAll('.page-title');
                        titleElements.forEach(el => {
                            el.textContent = newValue;
                        });

                        closeEditModal();

                        // Show success notification
                        const notification = document.createElement('div');
                        notification.className = 'fixed bottom-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
                        notification.textContent = 'Title updated successfully!';
                        document.body.appendChild(notification);

                        // Remove notification after 3 seconds
                        setTimeout(() => {
                            notification.remove();
                        }, 3000);

                    } else if (fieldType === 'url') {
                        console.log('Updating URL:', {
                            currentUrlId: pageId,
                            newUrlId: newValue
                        });

                        const response = await fetch(`/api/pages/update/${pageId}/url`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Accept': 'application/json'
                            },
                            body: JSON.stringify({ 
                                newUrlId: newValue 
                            })
                        });

                        if (!response.ok) {
                            const errorData = await response.json();
                            throw new Error(errorData.error || 'Failed to update URL');
                        }

                        const data = await response.json();
                        
                        // Update URL in the table row
                        const row = document.querySelector(`tr[data-page-id="${pageId}"]`);
                        if (!row) {
                            throw new Error('Could not find page row in table');
                        }

                        // Update URL text and links
                        const urlElements = row.querySelectorAll('.page-url');
                        urlElements.forEach(el => {
                            el.textContent = data.newUrlId;
                        });

                        // Update all links in the row
                        const links = row.querySelectorAll('a');
                        links.forEach(link => {
                            const username = link.href.split('/')[3]; // Get username from current URL
                            link.href = `/${username}/${data.newUrlId}`;
                        });

                        // Update row's data attribute
                        row.dataset.pageId = data.newUrlId;

                        closeEditModal();

                        // Show success notification
                        const notification = document.createElement('div');
                        notification.className = 'fixed bottom-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
                        notification.textContent = 'URL updated successfully!';
                        document.body.appendChild(notification);

                        // Remove notification after 3 seconds
                        setTimeout(() => {
                            notification.remove();
                        }, 3000);
                    }
                } catch (error) {
                    console.error('Error updating:', error);
                    
                    // Show error notification
                    const notification = document.createElement('div');
                    notification.className = 'fixed bottom-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
                    notification.textContent = error.message || `Error updating ${fieldType}. Please try again.`;
                    document.body.appendChild(notification);

                    // Remove error notification after 3 seconds
                    setTimeout(() => {
                        notification.remove();
                    }, 3000);
                }
            });
        }

        // Add input validation for the edit modal
        const editValueInput = document.getElementById('editValue');
        if (editValueInput) {
            editValueInput.addEventListener('input', function() {
                const submitButton = this.closest('form').querySelector('button[type="submit"]');
                if (this.value.trim() === '') {
                    submitButton.disabled = true;
                    submitButton.classList.add('opacity-50', 'cursor-not-allowed');
                } else {
                    submitButton.disabled = false;
                    submitButton.classList.remove('opacity-50', 'cursor-not-allowed');
                }
            });
        }

        // Handle Enter key in edit modal
        editForm.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                const submitButton = this.querySelector('button[type="submit"]');
                if (!submitButton.disabled) {
                    submitButton.click();
                }
            }
        });
    });
    
    // Delete Modal Functions
    function showDeleteModal(urlId, title) {
        currentPageUrlId = urlId;
        document.getElementById('pageTitle').textContent = title;
        document.getElementById('deleteModal').classList.remove('hidden');
    }
    
    function closeDeleteModal() {
        currentPageUrlId = null;
        document.getElementById('deleteModal').classList.add('hidden');
    }
    
    async function deletePageConfirmed() {
        if (!currentPageUrlId) return;
        
        try {
            const response = await fetch(`/api/pages/${currentPageUrlId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            if (response.ok) {
                window.location.reload();
            } else {
                const data = await response.json();
                alert(data.error || 'Failed to delete page');
            }
        } catch (error) {
            console.error('Error deleting page:', error);
            alert('Error deleting page. Please try again.');
        }
    }
    
    // Modal close handlers
    [editModal, deleteModal].forEach(modalId => {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.addEventListener('click', function(event) {
                if (event.target === this) {
                    if (modalId === 'editModal') {
                        closeEditModal();
                    } else {
                        closeDeleteModal();
                    }
                }
            });
    
            // Prevent closing when clicking inside the modal content
            const modalContent = modal.querySelector('.bg-white');
            if (modalContent) {
                modalContent.addEventListener('click', function(event) {
                    event.stopPropagation();
                });
            }
        }
    });
    
    // Close modals on escape key
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            closeEditModal();
            closeDeleteModal();
        }
    });
    </script>