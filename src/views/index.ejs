<div class="max-w-4xl mx-auto">
    <% if (typeof user !== 'undefined' && user) { %>
        <div class="bg-white shadow rounded-lg p-6 relative">
           <!-- Action Links and Line -->
            <!-- Header Container -->
            <div class="page-header-container">
                <!-- Title Section -->
                <div class="editable-title-container">
                    <div id="page-title" class="editable-title" contenteditable="true">
                        Untitled Growth Canvas
                    </div>
                </div>

                <!-- Action Links -->
                <div class="action-links">
                    <a href="#" id="saveTitleLink" class="text-gray-400 hover:text-blue-600 transition-colors duration-200 hidden" title="Save Changes">
                        <ion-icon name="save-outline" size="20"></ion-icon>
                    </a>
                </div>

            </div>
            <!-- Header Line -->
            <div class="header-line"></div>

            <!-- Grid container with explicit axes - no border -->
            <div class="flex flex-col items-center justify-center">
                                
                <div id="xy-plane" style="position: relative; width: 500px; height: 500px; margin: auto;">
                    <div class="y-axis"></div>
                    <div class="x-axis"></div>
                    
                    <!-- X-axis labels -->
                    <div class="x-label-group left">
                        <div class="main-label">Never</div>
                        <div class="sub-label">Do</div>
                    </div>
                    <div class="x-label-group right">
                        <div class="main-label">Always</div>
                        <div class="sub-label">Do</div>
                    </div>
                    
                    <!-- Y-axis labels -->
                    <div class="y-label top">Helpful</div>
                    <div class="y-label bottom">Unhelpful</div>
                </div>
            </div>
        </div>
    <% } else { %>
        <div class="bg-white shadow rounded-lg p-6 mb-6">
            <h2 class="text-2xl font-semibold mb-4">Get Started</h2>
            <p class="text-gray-600 mb-6">Sign in with Google to create and manage your pages.</p>
            <a href="/auth/google" class="inline-block bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded">
                Sign in with Google
            </a>
        </div>
    <% } %>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
    <div class="bg-white p-6 rounded-lg max-w-md w-full mx-4">
        <h3 class="text-lg font-semibold mb-4">Confirm Delete</h3>
        <p class="mb-4">Are you sure you want to delete this page? This action cannot be undone.</p>
        <div class="flex justify-end gap-4">
            <button onclick="closeDeleteModal()" class="px-4 py-2 border rounded hover:bg-gray-100">
                Cancel
            </button>
            <button onclick="deletePage()" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600">
                Delete
            </button>
        </div>
    </div>
</div>

<script>

function showSaveButton() {
    const saveLink = document.getElementById('saveTitleLink');
    console.log('Attempting to show save button', { saveLink, hasChanges });
    if (saveLink) {
        saveLink.classList.remove('hidden');
        hasChanges = true;
        console.log('Save button shown');
    }
}

let hasChanges = false;

document.addEventListener('DOMContentLoaded', function() {
    const titleElement = document.getElementById('page-title');
    const saveLink = document.getElementById('saveTitleLink');
    const xyPlane = document.getElementById('xy-plane');
    let originalTitle = 'Untitled';
    
    function hideSaveButton() {
        saveLink.classList.add('hidden');
    }

    function getAllDots() {
        const dots = [];
        const dotElements = document.querySelectorAll('.dot-container');
        const xyPlane = document.getElementById('xy-plane');
        
        if (!xyPlane) return dots;
        
        const xyPlaneRect = xyPlane.getBoundingClientRect();
        
        dotElements.forEach((container) => {
            const dotEl = container;
            const labelEl = dotEl.querySelector('.user-dot-label');
            const coordsEl = dotEl.querySelector('.dot-coordinates');
            
            // Get absolute pixel positions
            const left = parseFloat(dotEl.style.left);
            const top = parseFloat(dotEl.style.top);
            
            // Keep original pixel positions
            const dot = {
                x: `${left}px`,
                y: `${top}px`,
                coordinates: coordsEl?.textContent || '',
                label: labelEl?.textContent || '',
                labelOffset: {
                    x: 50,
                    y: -50
                }
            };
            
            dots.push(dot);
        });
        
        return dots;
    }

    if (titleElement && saveLink) {
        // Initially hide save button
        hideSaveButton();

        // Save link click handler
        saveLink.addEventListener('click', async function(e) {
            e.preventDefault();
            e.stopPropagation();

            const newTitle = titleElement.textContent.trim();
            const dots = getAllDots();

            if (!dots.length && newTitle === 'Untitled') {
                alert('Please add some data points or change the title before saving.');
                return;
            }

            try {
                const response = await fetch('/api/pages/save', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        title: newTitle,
                        dots: dots,
                        content: newTitle
                    })
                });

                if (response.ok) {
                    const data = await response.json();
                    if (data.urlId && data.username) {
                        window.location.href = `/${data.username}/${data.urlId}`;
                    } else {
                        window.location.href = '/dashboard';
                    }
                } else {
                    const errorData = await response.json();
                    alert('Failed to save page: ' + (errorData.error || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error saving page:', error);
                alert('Error saving page. Please try again.');
            }
        });

        // Title editing events
        titleElement.addEventListener('input', function() {
            const currentTitle = this.textContent.trim();
            if (currentTitle !== 'Untitled' && currentTitle !== originalTitle) {
                showSaveButton();
            }
        });

        titleElement.addEventListener('focus', function() {
            originalTitle = this.textContent;
        });

        titleElement.addEventListener('blur', function(e) {
            if (e.relatedTarget !== saveLink) {
                if (!this.textContent.trim()) {
                    this.textContent = 'Untitled';
                }
            }
        });

        // Monitor grid changes

        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.type === 'childList' && 
                    (mutation.addedNodes.length > 0 || mutation.removedNodes.length > 0)) {
                    const dots = getAllDots();
                    if (dots.length > 0) {
                        showSaveButton();
                    }
                } else if (mutation.type === 'attributes' && 
                        mutation.target instanceof Element &&
                        mutation.target.classList.contains('dot-container')) {
                    showSaveButton();
                }
            });
        });

        observer.observe(xyPlane, { 
            childList: true, 
            subtree: true,
            attributes: true,
            attributeFilter: ['style', 'data-line-length', 'data-line-angle']
        });

        // Listen for custom events from the dots system
        document.addEventListener('dotCreated', showSaveButton);
        document.addEventListener('dotDeleted', () => {
            const dots = getAllDots();
            if (dots.length === 0) {
                hideSaveButton();
            } else {
                showSaveButton();
            }
        });

        // Prevent default behavior of Enter key
        titleElement.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                saveLink.click();
            }
        });
    }
});

function showDeleteModal() {
    document.getElementById('deleteModal').classList.remove('hidden');
}

function closeDeleteModal() {
    document.getElementById('deleteModal').classList.add('hidden');
}

async function deletePage() {
    try {
        const response = await fetch(window.location.pathname, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        if (response.ok) {
            window.location.href = '/dashboard';
        } else {
            const data = await response.json();
            throw new Error(data.error || 'Failed to delete page');
        }
    } catch (error) {
        console.error('Error deleting page:', error);
        alert(error.message || 'Error deleting page. Please try again.');
    }
    closeDeleteModal();
}
</script>

<!-- Bundle all TypeScript code -->
<script src="/js/bundle.js"></script>